#+author: who4mos
#+title: My emacs config
#+property: header-args :tangle ~/.config/emacs/init.el

* Lexical Binding

Use [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-Lisp-Dialect.html][lexical binding]].

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Packages setup

Adds melpa to package archives and require ~use-package~.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (require 'use-package)
#+end_src

** Try packages!

[[http://github.com/larstvei/try][try]] allows you to /try/ emacs packages without installing them.

#+begin_src emacs-lisp
  (use-package try
    :ensure t
    :defer t)
#+end_src

* Better defaults

Activate some convenient modes and set some variables.

#+begin_src emacs-lisp
  (use-package emacs
  :custom
  ;; usefull global modes
  (recentf-mode t)          ; saves opened files history
  (savehist-mode t)         ; saves minibuffer history
  (winner-mode t)           ; records window changes and can undo them
  (column-number-mode t)    ; show column number in mode line
  (which-key-mode t)        ; displays possible following key bindings
  (delete-selection-mode t) ; typing replaces text if in a region
  ;; backups
  (backup-directory-alist   ; set backup directory
  `(("." . ,(concat user-emacs-directory ".backups"))))
  ;; bars
  (tool-bar-mode nil)                   ; turn off tool bar
  (menu-bar-mode nil)                   ; turn off menu bar
  (scroll-bar-mode nil)                 ; turn off scroll bar
  ;; initial screen
  (inhibit-startup-screen t)            ; don't display startup screen
  (initial-scratch-message "")          ; start scratch buffer empty
  ;; indentation/completion
  (indent-tabs-mode nil)         ; indentation inserts spaces
  (tab-width 4)                  ; distance between tab stops
  (tab-always-indent 'complete)) ; first try to indent, then try to complete
#+end_src

Specify how to name buffers with the same name (e.g.: ~dev/test~ & ~bin/test~).

#+begin_src emacs-lisp
  (use-package uniquify
    :custom
    (uniquify-buffer-name-style 'forward))
#+end_src

* UI

Set mono-spaced and variable-pitch fonts

#+begin_src emacs-lisp
    (set-face-attribute 'default nil :family "Iosevka Extended" :height 120)
    (set-face-attribute 'fixed-pitch nil :family "Iosevka Extended" :height 1.0)
    (set-face-attribute 'variable-pitch nil :family "Iosevka Aile" :height 1.0)
#+end_src

Set and configure [[https://protesilaos.com/emacs/ef-themes][εὖ-themes]].

#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :custom
    (ef-themes-mixed-fonts t)
    (ef-themes-headings
      '((0 variable-pitch light 1.8)
        (1 variable-pitch light 1.7)
        (2 variable-pitch regular 1.6)
        (3 variable-pitch regular 1.5)
        (4 variable-pitch regular 1.4)
        (5 variable-pitch 1.3)
        (6 variable-pitch 1.2)
        (7 variable-pitch 1.15)
        (t variable-pitch 1.1)))
     :config
     (load-theme 'ef-elea-dark :no-confirm))
#+end_src

** nerd-icons 

[[https://github.com/rainstormstudio/nerd-icons.el][nerd-icons]] allows you to use [[https://github.com/ryanoasis/nerd-fonts][nerd-fonts]] in emacs.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :ensure t)
#+end_src

[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]] adds nerd icons to [[* Dired][dired]].

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :ensure t
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

[[https://github.com/rainstormstudio/nerd-icons-completion][nerd-icons-completion]] gives minibuffer completions nerd icons.

#+begin_src emacs-lisp
  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

[[https://github.com/LuigiPiucco/nerd-icons-corfu][nerd-icons-corfu]] adds nerd icons to [[* Corfu][corfu]] completions.

#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :init
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]] display nerd icons in ibuffer.

#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

* ibuffer

Use ~ibuffer~ instead off default ~list-buffers~, also configure for ace-window to work with it.

#+begin_src emacs-lisp
  (use-package ibuffer
    :bind
    ([remap list-buffers] . ibuffer)) ; replace list-buffers with ibuffer

  (use-package ibuffer
    :after ace-window
    :bind (
           :map ibuffer-mode-map
           ("M-o" . ace-window))) ; remap M-o to ace-window within ibuffer
#+end_src

* Helpful

[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to emacs built-in help commands that provides more information.

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command)
    ([remap describe-symbol] . helpful-symbol))
#+end_src

* Dired

Configure dired.

#+begin_src emacs-lisp
  (use-package dired
    :commands (dired)
    :custom
    (dired-dwim-target t)
    (dired-listing-switches "-lAFhv --group-directories-first"))
#+end_src

** dired-subtree

[[https://github.com/Fuco1/dired-hacks/?tab=readme-ov-file#dired-subtree][dired-subtree]] allows you to view the content of a directory without opening a separate buffer.

#+begin_src emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind (
  	     :map dired-mode-map
  	     ("<tab>" . dired-subtree-toggle)
  	     ("TAB" . dired-subtree-toggle))
    :custom
    (dired-subtree-use-backgrounds nil))
#+end_src

* Window movement

[[https://github.com/abo-abo/ace-window][ace-window]], bind it to ~M-o~ and unbind the default ~other-window~.

#+begin_src emacs-lisp
  (use-package ace-window
      :ensure t
      :bind
      ("C-x o" . nil)
      ("M-o" . ace-window))
#+end_src

* Search and navigation

[[https://github.com/minad/consult][Consult]] provides search and navigation commands.

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind 
    ([remap switch-to-buffer] . consult-buffer)
    ([remap yank-pop] . consult-yank-pop)
    ([remap goto-line] . consult-goto-line)
    ([remap isearch-forward] . consult-line)
    ([remap imenu] . consult-imenu)
    ("C-c m" . consult-man)
    ("C-c i" . consult-info)
    ("M-g f" . consult-flymake))

  (use-package consult
    :after org
    :bind (
           :map org-mode-map
           ([remap imenu] . consult-org-heading)))
#+end_src

[[https://github.com/abo-abo/avy][avy]] helps with in buffer navigation, allowing you to jump to visible text using a char decision tree.

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :custom
    (avy-timeout-seconds 0.3)
    :bind
    ("M-s" . avy-goto-char-timer))
#+end_src

* Minibuffer

[[https://github.com/minad/vertico][Vertico]] provides a minimalist vertical completion UI based on the default completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (enable-recursive-minibuffers t) ; use minibuffer while in minibuffer
    (vertico-cycle t)           ; enable cycle for vertico next/previous
    :init
    (vertico-mode))
#+end_src

[[https://github.com/minad/marginalia][Marginalia]] adds marginalia to minibuffer completions.

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :bind (
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

* Completion

[[https://github.com/oantolin/orderless][Orderless]] provides an *orderless* completion style. It divides the pattern in space separated components and match candidates that match those components in any order.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides nil))
#+end_src

[[https://github.com/minad/corfu][Corfu]] enhances in-buffer completion with a small popup.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)                  ; enable cycling for candidates
    (corfu-auto t)                   ; enable auto completion
    (corfu-auto-prefix 2)            ; set auto completion minimum chars
    (corfu-popupinfo-mode t)               ; enable popup info
    (corfu-popupinfo-delay '(1 . 0.5))     ; set delay for the popup info
    (text-mode-ispell-word-completion nil) ; disable ispell completion function
    :bind (
           ;; bind popup controls
           :map corfu-map
           ("M-p" . corfu-popupinfo-scroll-down)
           ("M-n" . corfu-popupinfo-scroll-up)
           ("M-d" . corfu-popupinfo-toggle))
    :init
    (global-corfu-mode)) ; enable corfu globally
#+end_src



#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    :bind
    ("C-c p" . cape-prefix-map)
    :init
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))
#+end_src

* Org Mode

Configure org mode defaults.

#+begin_src emacs-lisp
  (use-package org
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    :custom
    (org-directory "~/org/")
    (org-agenda-files (list org-directory))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    (org-hide-emphasis-markers t)
    :hook
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode))
#+end_src

** olivetti

[[https://github.com/rnkn/olivetti][olivetti]] keeps text in the middle of the window.

#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :custom
    (olivetti-body-width 0.7)
    (olivetti-minimum-body-width 80)
    :hook
    (org-mode . olivetti-mode))
#+end_src

* Development

Set some defaults in programming modes.

#+begin_src emacs-lisp
  (use-package emacs
    :hook
    (prog-mode . display-line-numbers-mode) ; diplay line numbers
    (prog-mode . electric-pair-mode)        ; auto pair pairing
    (prog-mode . subword-mode))             ; subword movement and editing
#+end_src

** tree-sitter

[[https://tree-sitter.github.io/tree-sitter/][Tree-sitter]] is a parser generator tool and incremental parser lib. Since version 29, emacs can be built with tree sitter support.

The snippet sets language grammars and major mode remaps for the languages i use.

#+begin_src emacs-lisp
  (use-package treesit
    :custom
    (treesit-font-lock-level 4)           ; max font lock level
    ;; languagues to install
    (treesit-language-source-alist     
     '((python "https://github.com/tree-sitter/tree-sitter-python")
       (c "https://github.com/tree-sitter/tree-sitter-c")
       (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
       (html "https://github.com/tree-sitter/tree-sitter-html")
       (css "https://github.com/tree-sitter/tree-sitter-css")
       (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
       (java "https://github.com/tree-sitter/tree-sitter-java")))

    ;; major modes to use
    (major-mode-remap-alist
     '((python-mode . python-ts-mode)
       (c-mode . c-ts-mode)
       (c++-mode . c++-ts-mode)
       (html-mode . html-ts-mode)
       (mhtml-mode . html-ts-mode)
       (css-mode . css-ts-mode)
       (js-mode . js-ts-mode)
       (javascript-mode . js-ts-mode)
       (java-mode . java-ts-mode))))
#+end_src

The following snippet can be evaluated to install all language grammars specified above, it will not be tangled to the ~init.el~ file.

#+begin_src emacs-lisp :tangle no
  (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

*** Expreg

[[https://elpa.gnu.org/packages/expreg.html][Expreg]] increases selected region by semantic units using tree-sitter.

#+begin_src emacs-lisp
  (use-package expreg
    :ensure t
    :bind
    ("C-=" . expreg-expand)
    ("C-+" . expreg-contract))
#+end_src

** eglot

[[https://github.com/joaotavora/eglot][Eglot]] is the emacs client for the LSP.

#+begin_src emacs-lisp
  (use-package eglot
                                          ;    :custom
                                          ;    (completion-category-overrides '((eglot (styles orderless))
                                          ;                                     (eglot-capf (styles orderless))))
    :config
    ;; setup servers
    (add-to-list 'eglot-server-programs
                 '((python-ts-mode) "pyright" "--stdio"))
    (add-to-list 'eglot-server-programs
                 '((c-ts-mode c++-ts-mode) "clangd"))
    (add-to-list 'eglot-server-programs
  	           '((js-ts-mode) "typescript-language-server" "--stdio"))
    (add-to-list 'eglot-server-programs
  	           '((html-ts-mode) "vscode-html-language-server" "--stdio"))
    (add-to-list 'eglot-server-programs
  	           '((css-ts-mode) "vscode-css-language-server" "--stdio"))
    :hook
    ;; start servers 
    (python-ts-mode . eglot-ensure)
    (c-ts-mode . eglot-ensure)
    (c++-ts-mode . eglot-ensure)
    (html-ts-mode . eglot-ensure)
    (css-ts-mode . eglot-ensure)
    (js-ts-mode . eglot-ensure))
#+end_src

*** eglot-java

[[https://github.com/yveszoundi/eglot-java][eglot-java]] automatically sets up the Eclipse JDT language server.

#+begin_src emacs-lisp
  (use-package eglot-java
    :ensure t
    :hook
    (java-ts-mode . eglot-java-mode))
#+end_src

** Indentation bars

[[https://github.com/jdtsmith/indent-bars][indent-bars]] provides indentation guide bars with tree-sitter support.

#+begin_src emacs-lisp
  (use-package indent-bars
    :ensure t
    :custom
    (indent-bars-treesit-support t)
    :hook
    ((python-ts-mode c-ts-mode c++-ts-mode html-ts-mode css-ts-mode js-ts-mode) . indent-bars-mode))
#+end_src 

** Web Development

[[https://github.com/smihica/emmet-mode][emmet-mode]] allows you to use emmet in emacs.

#+begin_src emacs-lisp
   (use-package emmet-mode
     :ensure t
     :hook
     (html-ts-mode . emmet-mode))
#+end_src

By default, in HTML buffers ~M-o~ is binded to ~font-lock-fontify-block~ change it to also call ~ace-window~. ~sgml-slash~ is also binded to ~/~ by default unbind it.

#+begin_src emacs-lisp
  (use-package html-ts-mode
    :bind (
  	     :map html-ts-mode-map
  	     ("M-o" . ace-window)
           ("/" . nil)))
#+end_src

* Magit

[[https://github.com/magit/magit][magit]] is a git interface inside emacs.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+end_src

* vterm

[[https://github.com/akermu/emacs-libvterm][vterm]] is a fast and fully capable terminal emulator inside emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :commands (vterm))
#+end_src

** multi vterm 

[[https://github.com/suonlight/multi-vterm][multi-vterm]] allows you to manage multiple vterm instances.

#+begin_src emacs-lisp
  (use-package multi-vterm
    :ensure t
    :custom
    (multi-vterm-dedicated-window-height-percent 30)
    :bind
    ("C-;" . multi-vterm-dedicated-toggle))
#+end_src

* sxhkdrc-mode

[[https://github.com/protesilaos/sxhkdrc-mode][sxhkdrc-mode]] is a major mode for editing ~sxhkdrc~ files, which i use with bspwm.

#+begin_src emacs-lisp
  (use-package sxhkdrc-mode
    :ensure t
    :mode "sxhkdrc")
#+end_src

* Writing

[[https://github.com/minad/jinx][jinx]] is a fast spell checker for emacs, it relies on the [[https://rrthomas.github.io/enchant/][enchant]] library.

#+begin_src emacs-lisp
  (use-package jinx
    :ensure t
    :bind
    ("M-$" . jinx-correct)
    ("C-M-$" . jinx-languages)
    :custom
    (jinx-languages "en_US pt_BR")
    :hook
    (text-mode . jinx-mode))
#+end_src

[[https://github.com/eliascotto/accent][accent]] provides a popup with accented versions of the character at point.

#+begin_src emacs-lisp
  (use-package accent
    :ensure t
    :bind
    ("C-x C-a" . accent-corfu))
#+end_src
